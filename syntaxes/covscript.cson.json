{
	"version": "1.0.0",
	"name": "CovScript",
	"scopeName": "source.covscript",
	"fileTypes": [
		"csc",
		"csp"
	],
	"firstLineMatch": "^#!\\s*/.*(?:covscript|cs)\\b",
	"patterns": [
		{
			"begin": "(?x)\n^\\s*(import)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.import.covscript"
				}
			},
			"end": "$",
			"name": "meta.import.covscript",
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "keyword.control.import_as.covscript"
						},
						"2": {
							"name": "entity.name.type.package.covscript"
						}
					},
					"match": "(as)\\s+([A-Za-z_]\\w*)",
					"name": "meta.import_as.covscript"
				},
				{
					"include": "#comma_list"
				},
				{
					"include": "$self"
				}
			]
		},
		{
			"captures": {
				"1": {
					"name": "keyword.control.package.covscript"
				},
				"2": {
					"name": "entity.name.type.package.covscript"
				}
			},
			"match": "(?x)\n^\\s*(package)\\s+([A-Za-z_]\\w*)\\s*$",
			"name": "meta.package.covscript"
		},
		{
			"begin": "(?x)\n^\\s*(var|constant|link)\\b(?![?!])",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.var.covscript"
				}
			},
			"end": "$",
			"name": "meta.var.covscript",
			"patterns": [
				{
					"include": "#variable_definition"
				},
				{
					"include": "#structured_binding"
				},
				{
					"include": "$self"
				}
			]
		},
		{
			"begin": "(?x)\n^\\s*(using|namespace|if|switch|case|while|until|return|throw)\\b(?![?!])",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.other.covscript"
				}
			},
			"end": "$",
			"name": "meta.control_stmts.covscript",
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"begin": "(?x)\n^\\s*(for)\\s+([A-Za-z_]\\w*)\\s*=",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.for.covscript"
				},
				"2": {
					"name": "variable.other.covscript"
				}
			},
			"end": "$",
			"name": "meta.for.covscript",
			"patterns": [
				{
					"match": "\\b(do)\\b(?![?!])",
					"name": "keyword.control.fordo.covscript"
				},
				{
					"include": "$self"
				}
			]
		},
		{
			"begin": "(?x)\n^\\s*(foreach)\\s+([A-Za-z_]\\w*)\\s+(in)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.foreach.covscript"
				},
				"2": {
					"name": "variable.other.covscript"
				},
				"3": {
					"name": "keyword.control.in.covscript"
				}
			},
			"end": "$",
			"name": "meta.foreach.covscript",
			"patterns": [
				{
					"match": "\\b(do)\\b(?![?!])",
					"name": "keyword.control.fordo.covscript"
				},
				{
					"include": "$self"
				}
			]
		},
		{
			"begin": "(?x)\n^\\s*(function)\\s+([A-Za-z_]\\w*)\\s*\\(",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.function.covscript"
				},
				"2": {
					"name": "entity.name.function.covscript"
				}
			},
			"end": "\\)\\s*(override)?\\s*$",
			"endCaptures": {
				"1": {
					"name": "keyword.control.override.covscript"
				}
			},
			"name": "meta.function.covscript",
			"patterns": [
				{
					"include": "#args_list"
				}
			]
		},
		{
			"begin": "(?x)\n^\\s*(class|struct)\\s+([A-Za-z_]\\w*)\\s+(extends)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.class.covscript"
				},
				"2": {
					"name": "entity.name.type.class.covscript"
				},
				"3": {
					"name": "keyword.control.extends.covscript"
				}
			},
			"end": "$",
			"name": "meta.class_extends.covscript",
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"captures": {
				"1": {
					"name": "keyword.control.class.covscript"
				},
				"2": {
					"name": "entity.name.type.class.covscript"
				},
				"3": {
					"name": "keyword.control.extends.covscript"
				}
			},
			"match": "(?x)\n^\\s*(class|struct)\\s+([A-Za-z_]\\w*)\\s*$",
			"name": "meta.class.covscript"
		},
		{
			"match": "\\bnull\\b(?![?!])",
			"name": "constant.language.nil.covscript"
		},
		{
			"match": "\\b(true|false)\\b(?![?!])",
			"name": "constant.language.boolean.covscript"
		},
		{
			"match": "\\b(this|self)\\b(?![?!])",
			"name": "variable.language.self.covscript"
		},
		{
			"match": "\\b(and|or|not|typeid|new|gcnew|local|global)\\b(?![?!])",
			"name": "keyword.other.special-method.covscript"
		},
		{
			"match": "(?x)\n^\\s*(block|else|default|loop|break|continue|try|end)\\s*$",
			"name": "keyword.control.reserved.covscript"
		},
		{
			"match": "(?x)\n^\\s*(@[A-Za-z_]\\w*)\\s*(:\\s*[A-Za-z_]\\w*\\s*)?$",
			"name": "entity.name.tag.preprocessor.covscript"
		},
		{
			"begin": "^\\s*#",
			"end": "$",
			"name": "comment.line.number-sign"
		},
		{
			"match": "\\b[0-9]+(.[0-9]+)?\\b(?![?!])",
			"name": "constant.numeric"
		},
		{
			"match": "\\b(initialize|finalize|duplicate|equal|range|to_string|to_integer|type|clone|move|swap)\\b(?![?!])",
			"name": "keyword.other.special-method.covscript"
		},
		{
			"begin": "'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.covscript"
				}
			},
			"end": "'",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.covscript"
				}
			},
			"name": "string.quoted.single.covscript",
			"patterns": [
				{
					"include": "#escaped_char"
				}
			]
		},
		{
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.covscript"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.covscript"
				}
			},
			"name": "string.quoted.double.covscript",
			"patterns": [
				{
					"include": "#escaped_char"
				}
			]
		},
		{
			"match": ";",
			"name": "punctuation.separator.statement.covscript"
		},
		{
			"match": ",",
			"name": "punctuation.separator.object.covscript"
		},
		{
			"match": "{",
			"name": "punctuation.section.scope.begin.covscript"
		},
		{
			"match": "}",
			"name": "punctuation.section.scope.end.covscript"
		},
		{
			"match": "\\(|\\)",
			"name": "punctuation.section.function.covscript"
		},
		{
			"begin": "(?=[A-Za-z_]\\w*\\s*\\()",
			"end": "(?<=\\))",
			"name": "meta.function-call.covscript",
			"patterns": [
				{
					"match": "([A-Za-z_]\\w*)\\s*((?=\\()|([!?]))",
					"name": "entity.name.function.covscript"
				},
				{
					"include": "$self"
				}
			]
		},
		{
			"begin": "\\[\\]\\s*\\(",
			"end": "\\)\\s*->",
			"name": "meta.lambda_expression.covscript",
			"patterns": [
				{
					"include": "#args_list"
				}
			]
		},
		{
			"match": "\\[",
			"name": "punctuation.section.array.begin.covscript"
		},
		{
			"match": "]",
			"name": "punctuation.section.array.end.covscript"
		}
	],
	"repository": {
		"escaped_char": {
			"match": "\\\\(a|b|f|n|r|t|v|\\|'|\"|0)",
			"name": "constant.character.escape.covscript"
		},
		"args_list": {
			"captures": {
				"1": {
					"name": "variable.other.covscript"
				}
			},
			"match": "([A-za-z_]\\w*)\\s*,?",
			"name": "meta.args_list.covscript"
		},
		"comma_list": {
			"captures": {
				"1": {
					"name": "entity.name.type.package.covscript"
				}
			},
			"match": "([A-za-z_]\\w*)\\s*,?",
			"name": "meta.comma_list.covscript"
		},
		"variable_definition": {
			"captures": {
				"1": {
					"name": "variable.other.covscript"
				}
			},
			"match": "([A-za-z_]\\w*)\\s*=",
			"name": "meta.vardef.covscript"
		},
		"structured_binding": {
			"begin": "\\(",
			"end": "\\)\\s*=",
			"name": "meta.structured_binding.covscript",
			"patterns": [
				{
					"match": "\\b([A-za-z_]\\w*)\\b(?![?!])",
					"name": "variable.other.covscript"
				}
			]
		}
	}
}