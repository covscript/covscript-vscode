{
	"Println": {
		"prefix": "sout",
		"body": [
			"system.out.println($0)"
		],
		"description": "Print to standard output"
	},
	"Get line": {
		"prefix": "getl",
		"body": [
			"system.in.getline()"
		],
		"description": "Get line from standard input"
	},
	"Import module": {
		"prefix": "import",
		"body": [
			"import $0"
		],
		"description": "Import a module"
	},
	"Package definition": {
		"prefix": "package",
		"body": [
			"package $0"
		],
		"description": "Define a package"
	},
	"Using alias": {
		"prefix": "using",
		"body": [
			"using $0"
		],
		"description": "Using alias"
	},
	"Try-catch": {
		"prefix": "try",
		"body": [
			"try",
			"\t$1",
			"catch ${2:exception1}",
			"\t$3",
			"catch ${4:exception2}",
			"\t$5",
			"end"
		],
		"description": "Try-catch block"
	},
	"Class or Struct": {
		"prefix": [
			"class",
			"struct"
		],
		"body": [
			"${1:classOrStruct} ${2:Name}",
			"\tfunction initialize()",
			"\t\t$0",
			"\tend",
			"end"
		],
		"description": "Class or struct definition"
	},
	"Namespace": {
		"prefix": "namespace",
		"body": [
			"namespace ${1:Name}",
			"\t$0",
			"end"
		],
		"description": "Namespace definition"
	},
	"Foreach loop": {
		"prefix": "forin",
		"body": [
			"foreach ${1:var} in ${2:collection}",
			"\t$0",
			"end"
		],
		"description": "Foreach loop over enumerable"
	},
	"Foreach loop inline": {
		"prefix": "forinlin",
		"body": [
			"foreach ${1:var} in ${2:collection} do ${0}"
		],
		"description": "Single-line foreach loop"
	},
	"For range inline": {
		"prefix": "fordo",
		"body": [
			"for ${1:init}; ${2:cond}; ${3:step} do ${0}"
		],
		"description": "Single-line for loop"
	},
	"If": {
		"prefix": "if",
		"body": [
			"if ${1:test}",
			"\t$0",
			"end"
		],
		"description": "If statement"
	},
	"If else": {
		"prefix": "ifelse",
		"body": [
			"if ${1:test}",
			"\t$2",
			"else",
			"\t$0",
			"end"
		],
		"description": "If-else statement"
	},
	"Switch": {
		"prefix": "switch",
		"body": [
			"switch ${1:test}",
			"\t$0",
			"end"
		],
		"description": "Switch statement"
	},
	"Case": {
		"prefix": "case",
		"body": [
			"case ${1:constant}",
			"\t$0",
			"end"
		],
		"description": "Case branch in switch"
	},
	"Default": {
		"prefix": "default",
		"body": [
			"default",
			"\t$0",
			"end"
		],
		"description": "Default branch in switch"
	},
	"Loop forever": {
		"prefix": "loop",
		"body": [
			"loop",
			"\t$0",
			"end"
		],
		"description": "Infinite loop"
	},
	"Loop until": {
		"prefix": "loopuntil",
		"body": [
			"loop",
			"\t$0",
			"until ${1:test}"
		],
		"description": "Loop until condition is true"
	},
	"While loop": {
		"prefix": "while",
		"body": [
			"while ${1:test}",
			"\t$0",
			"end"
		],
		"description": "While loop"
	},
	"Function": {
		"prefix": "function",
		"body": [
			"function ${1:name}(${2:params})",
			"\t$0",
			"end"
		],
		"description": "Function definition"
	},
	"Lambda expression": {
		"prefix": "lambda",
		"body": [
			"[${1:captures}](${2:args}) {",
			"\t$0",
			"}"
		],
		"description": "Lambda / anonymous function"
	},
	"Array literal": {
		"prefix": "arr",
		"body": [
			"{ ${1:elements} }"
		],
		"description": "Array literal"
	},
	"Hash literal": {
		"prefix": "hash",
		"body": [
			"{ ${1:key}: ${2:value}, ${3:key2}: ${4:value2} }"
		],
		"description": "Hash literal"
	},
	"Struct binding": {
		"prefix": "bind",
		"body": [
			"(${1:vars}) = ${2:expr}"
		],
		"description": "Structured binding / destructuring assignment"
	},
	"Break": {
		"prefix": "break",
		"body": [
			"break"
		],
		"description": "Break from loop"
	},
	"Continue": {
		"prefix": "continue",
		"body": [
			"continue"
		],
		"description": "Continue loop"
	},
	"Return": {
		"prefix": "return",
		"body": [
			"return ${1:expr}"
		],
		"description": "Return from function"
	},
	"Throw": {
		"prefix": "throw",
		"body": [
			"throw ${1:expr}"
		],
		"description": "Throw exception"
	}
}